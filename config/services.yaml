# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    GOOGLE_API_KEY: '%env(GOOGLE_API_KEY)%'
    KOBO_PROXY_ENABLED: '%env(bool:KOBO_PROXY_ENABLED)%'
    env(KOBO_PROXY_ENABLED): true
    KOBO_PROXY_USE_DEV: '%env(bool:KOBO_PROXY_USE_DEV)%'
    env(KOBO_PROXY_USE_DEV): false
    KOBO_PROXY_USE_EVERYWHERE: '%env(bool:KOBO_PROXY_USE_EVERYWHERE)%'
    env(KOBO_PROXY_USE_EVERYWHERE): false
    KOBO_PROXY_DEBUG_HAR: '%env(bool:KOBO_PROXY_DEBUG_HAR)%'
    env(KOBO_PROXY_DEBUG_HAR): false
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'



    gedmo.listener.timestampable:
        class: Gedmo\Timestampable\TimestampableListener
        tags:
            - { name: doctrine.event_listener, event: 'prePersist' }
            - { name: doctrine.event_listener, event: 'onFlush' }
            - { name: doctrine.event_listener, event: 'loadClassMetadata' }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    gedmo.listener.sluggable:
        class: Gedmo\Sluggable\SluggableListener
        tags:
            - { name: doctrine.event_listener, event: 'prePersist' }
            - { name: doctrine.event_listener, event: 'onFlush' }
            - { name: doctrine.event_listener, event: 'loadClassMetadata' }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    app.menu_builder:
        class: App\Menu\MenuBuilder
        arguments: ["@knp_menu.factory"]
        tags:
            - { name: knp_menu.menu_builder, method: createMainMenu, alias: main } # The alias is what is used to retrieve the menu

    app.display_mode_subscriber:
        class: App\EventSubscriber\DisplayModeSubscriber


    App\Service\BookSearch:
       arguments:
           $autocompleteBookFinder: '@typesense.specificfinder.books.books_autocomplete'

    App\Kobo\Proxy\KoboProxyConfiguration:
        arguments:
            $harDirectory: '%kernel.logs_dir%/har/'
        calls:
            - [ setUseDevProxy, ['%KOBO_PROXY_USE_DEV%'] ]
            - [ setEnabled, ['%KOBO_PROXY_ENABLED%'] ]
            - [ setUseProxyEverywhere, ['%KOBO_PROXY_USE_EVERYWHERE%'] ]
            - [ setIsDebugHar, ['%KOBO_PROXY_DEBUG_HAR%'] ]

    App\Kobo\Proxy\KoboProxyListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 130 }

    App\Kobo\ParamConverter\SyncTokenParamConverter:
        tags:
            - { name: request.param_converter, priority: 100 }

    App\Service\BookFileSystemManager:
        bind:
            '$projectDir': '%kernel.project_dir%'